import { API_BASE_URL } from "../config.js";

async function loadRevenue() {
    try {
        const res = await fetch(`${API_BASE_URL}/orders/all`, {
            method: "GET",
            credentials: "include",
        });
        return await res.json();
    } catch (error) {
        console.error(`L·ªói trang Doanh Thu, loadRevenue: ${error}`);
    }
}

function formatCurrency(value) {
    return `‚Ç´ ${value.toLocaleString("vi-VN")}`;
}

async function renderRevenues(revenueSummary) {
    document.querySelector("#total-revenue").innerText = formatCurrency(
        revenueSummary.revenue
    );
    document.querySelector("#total-profit").innerText = formatCurrency(
        revenueSummary.profit
    );
    document.querySelector("#avg-order-value").innerText = formatCurrency(
        revenueSummary.averageOrderValue
    );
    document.querySelector(
        "#conversion-rate"
    ).innerText = `${revenueSummary.conversionRate}%`;
}
function calculateMonthlyRevenueSummary(orders) {
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();

    // üîπ L·ªçc ƒë∆°n trong th√°ng hi·ªán t·∫°i
    const ordersThisMonth = orders.filter((order) => {
        const orderDate = new Date(order.ngayDat);
        return (
            orderDate.getMonth() === currentMonth &&
            orderDate.getFullYear() === currentYear
        );
    });

    const completedOrders = ordersThisMonth.filter(
        (o) => o.orderStatus === "Ho√†n th√†nh"
    );

    // üîπ T·ªïng doanh thu
    const revenue = completedOrders.reduce(
        (sum, o) => sum + (o.tongTienThanhToan || 0),
        0
    );

    // üîπ T·∫°m t√≠nh l·ª£i nhu·∫≠n (n·∫øu ch∆∞a c√≥ gi√° nh·∫≠p)
    const profit = revenue * 0.1; // gi·∫£ s·ª≠ bi√™n l·ª£i nhu·∫≠n 20%

    // üîπ Gi√° tr·ªã trung b√¨nh m·ªói ƒë∆°n ho√†n th√†nh
    const averageOrderValue =
        completedOrders.length > 0 ? revenue / completedOrders.length : 0;

    // üîπ T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi
    const conversionRate =
        ordersThisMonth.length > 0
            ? ((completedOrders.length / ordersThisMonth.length) * 100).toFixed(
                  2
              )
            : 0;

    return {
        revenue,
        profit,
        averageOrderValue,
        conversionRate,
    };
}
loadRevenue()
    .then((orders) => {
        const revenueSummary = calculateMonthlyRevenueSummary(orders);
        renderRevenues(revenueSummary);
    })
    .catch((error) =>
        console.log(`L·ªói trang Doanh Thu, renderRevenues: ${error}`)
    );

const glowPlugin = {
    id: "glow",
    beforeDatasetsDraw(chart) {
        const ctx = chart.ctx;
        chart.data.datasets.forEach((dataset, i) => {
            const meta = chart.getDatasetMeta(i);
            if (!meta.hidden) {
                ctx.save();
                ctx.shadowColor = dataset.borderColor;
                ctx.shadowBlur = 15;
                ctx.globalAlpha = 0.3;
                ctx.lineWidth = dataset.borderWidth;
                ctx.strokeStyle = dataset.borderColor;
                ctx.beginPath();
                meta.dataset.draw(ctx);
                ctx.stroke();
                ctx.restore();
            }
        });
    },
};
const crosshairPlugin = {
    id: "crosshair",
    beforeDatasetsDraw: (chart) => {
        // ƒë·ªïi t·ª´ afterDraw sang beforeDatasetsDraw
        if (chart.tooltip._active && chart.tooltip._active.length) {
            const ctx = chart.ctx;
            const activePoint = chart.tooltip._active[0];
            const x = activePoint.element.x;
            const topY = chart.scales.y.top;
            const bottomY = chart.scales.y.bottom;

            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x, topY);
            ctx.lineTo(x, bottomY);
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#aaa";
            ctx.setLineDash([4, 4]);
            ctx.stroke();
            ctx.restore();
        }
    },
};
async function renderRevenueCharts(data) {
    // Bi·ªÉu ƒë·ªì Doanh thu & L·ª£i nhu·∫≠n theo th√°ng
    new Chart(document.getElementById("chart-revenue-trend"), {
        type: "line",
        data: {
            // labels: [
            //     "Th√°ng 1",
            //     "Th√°ng 2",
            //     "Th√°ng 3",
            //     "Th√°ng 4",
            //     "Th√°ng 5",
            //     "Th√°ng 6",
            //     "Th√°ng 7",
            //     "Th√°ng 8",
            //     "Th√°ng 9",
            // ],
            labels: data.revenueTrend.labels,
            datasets: [
                {
                    label: " Doanh thu",
                    // data: [120, 150, 180, 160, 200, 220, 200, 150, 180],
                    data: data.revenueTrend.dataRevenue,
                    borderColor: "#43A047",
                    backgroundColor: "rgba(67,160,71,0.15)",
                    fill: true,
                    tension: 0.4,
                    borderWidth: 3,
                    pointRadius: 4,
                    pointBackgroundColor: "#43A047",
                    pointBorderWidth: 2,
                    pointHoverBackgroundColor: "#FFF",
                    pointHoverRadius: 5,
                    pointHoverBorderColor: "#43a",
                    pointHoverBorderWidth: 3,
                },
                {
                    label: " L·ª£i nhu·∫≠n",
                    // data: [45, 60, 70, 65, 90, 100, 150, 80, 100],
                    data: data.revenueTrend.dataProfit,
                    borderColor: "#1E88E5",
                    backgroundColor: "rgba(30,136,229,0.15)",
                    fill: true,
                    tension: 0.4,
                    borderWidth: 3,
                    pointRadius: 4,
                    pointBackgroundColor: "#1E88E5",
                    pointBorderWidth: 2,
                    pointHoverBackgroundColor: "#FFF",
                    pointHoverRadius: 5,
                    pointHoverBorderColor: "#43a",
                    pointHoverBorderWidth: 3,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                // legend: {
                //     position: "top",
                //     labels: {
                //         usePointStyle: true,
                //         pointStyle: "circle",
                //         padding: 20,
                //         font: { size: 14 }
                //     }
                // },
                tooltip: {
                    usePointStyle: true, // üîπ b·∫Øt bu·ªôc ƒë·ªÉ thay style
                    callbacks: {
                        title: function (context) {
                            const months = [
                                "Th√°ng 1",
                                "Th√°ng 2",
                                "Th√°ng 3",
                                "Th√°ng 4",
                                "Th√°ng 5",
                                "Th√°ng 6",
                                "Th√°ng 7",
                                "Th√°ng 8",
                                "Th√°ng 9",
                                "Th√°ng 10",
                                "Th√°ng 11",
                                "Th√°ng 12",
                            ];
                            return ` ${months[context[0].dataIndex]}`;
                        },
                        labelPointStyle: function (context) {
                            return {
                                pointStyle: "rectRounded", // c√≥ th·ªÉ l√† 'circle', 'rectRounded', 'rectRot', 'triangle', ...
                                rotation: 0,
                            };
                        },
                        labelColor: function (context) {
                            return {
                                borderColor: context.dataset.borderColor,
                                backgroundColor: context.dataset.borderColor,
                                borderWidth: 2,
                                borderRadius: 2,
                            };
                        },
                        label: (ctx) =>
                            `${ctx.dataset.label}: ${ctx.formattedValue} tri·ªáu ‚Ç´`,
                    },
                    titleMarginBottom: 10,
                    titleMarginLeft: 10,
                    titleFont: {
                        size: 14,
                    },
                    bodySpacing: 20, // tƒÉng kho·∫£ng c√°ch gi·ªØa c√°c d√≤ng
                    bodyFont: {
                        size: 14, // ch·ªânh ch·ªØ to h∆°n
                    },
                },
                legend: {
                    display: false,
                },
            },
            interaction: {
                intersect: false,
                mode: "index",
            },
            scales: {
                y: {
                    ticks: { color: "#555", font: { size: 13 } },
                    grid: { color: "#eee", borderDash: [5, 5] },
                },
                x: {
                    ticks: { color: "#555", font: { size: 13 } },
                    grid: { display: false },
                },
            },
        },
        plugins: [crosshairPlugin, glowPlugin],
    });

    // Bi·ªÉu ƒë·ªì C∆° c·∫•u doanh thu theo th∆∞∆°ng hi·ªáu
    new Chart(document.getElementById("chart-revenue-pie"), {
        type: "doughnut",
        data: {
            // labels: ["iPhone", "Samsung", "Xiaomi", "Oppo", "Kh√°c"],
            labels: data.revenuePie.labels,
            datasets: [
                {
                    // data: [320000, 280000, 190000, 150000, 100000],
                    data: data.revenuePie.data,
                    backgroundColor: [
                        "#FF6384",
                        "#36A2EB",
                        "#FFBE56",
                        "#4CAF50",
                        "#9C27B0",
                    ],
                    borderWidth: 3,
                    borderColor: "#FFF",
                    hoverBorderColor: "#FFF",
                    hoverOffset: 7,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: "60%",
            plugins: {
                legend: {
                    position: "right",
                    labels: {
                        usePointStyle: true,
                        pointStyle: "rectRounded", // c√≥ th·ªÉ l√† 'circle', 'rectRounded', 'rectRot', 'triangle', ...
                        padding: 20,
                        font: { size: 14 },
                    },
                },
                tooltip: {
                    backgroundColor: (context) => {
                        // l·∫•y ƒë√∫ng m√†u slice hi·ªán t·∫°i
                        const dataset = context.tooltip.dataPoints[0].dataset;
                        const index = context.tooltip.dataPoints[0].dataIndex;
                        return dataset.backgroundColor[index];
                    },
                    displayColors: false, // b·ªè √¥ vu√¥ng m·∫∑c ƒë·ªãnh
                    callbacks: {
                        title: function (context) {
                            // kh√¥ng c·∫ßn title ri√™ng, tr·∫£ v·ªÅ r·ªóng
                            return null;
                        },
                        label: function (context) {
                            const label = context.label || "";
                            const value = context.raw || 0;
                            const total =
                                context.chart._metasets[context.datasetIndex]
                                    .total;
                            const percentage = ((value / total) * 100).toFixed(
                                1
                            ); // l√†m tr√≤n 1 s·ªë th·∫≠p ph√¢n
                            return ` ${label}: ${value}‚Ç´ (${percentage}%) `;
                        },
                    },
                    bodyFont: {
                        size: 14,
                    },
                    padding: 8,
                },
            },
        },
    });

    // Bi·ªÉu ƒë·ªì TƒÉng tr∆∞·ªüng doanh thu theo tu·∫ßn (Bar chart)
    new Chart(document.getElementById("chart-revenue-growth"), {
        type: "bar",
        data: {
            labels: data.revenueGrowth.labels,
            datasets: [
                {
                    label: "TƒÉng tr∆∞·ªüng doanh thu (%)",
                    data: data.revenueGrowth.data,
                    backgroundColor: "#FF9800",
                    borderRadius: { topLeft: 10, topRight: 10 },
                    maxBarThickness: 60,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: (ctx) => `${ctx.formattedValue}%`, // ‚úÖ ƒë·ªïi t·ª´ "tri·ªáu ‚Ç´" sang "%"
                    },
                    displayColors: false,
                    titleFont: { size: 14 },
                    bodyFont: { size: 14 },
                    padding: 10,
                },
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: "#555",
                        font: { size: 13 },
                        callback: (val) => `${val}%`, // ‚úÖ tr·ª•c Y c≈©ng hi·ªÉn th·ªã %
                    },
                    grid: { color: "#eee", borderDash: [5, 5] },
                    title: {
                        display: true,
                        font: { size: 14, weight: "bold" },
                    },
                },
                x: {
                    ticks: { color: "#555", font: { size: 13 } },
                    grid: { display: false },
                },
            },
        },
    });
}
function generateRevenueChartsData(orders) {
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();

    // L·∫•y 6 th√°ng g·∫ßn nh·∫•t (theo d·∫°ng [ {month, year}, ... ])
    const recentMonths = [];
    for (let i = 5; i >= 0; i--) {
        const d = new Date(currentYear, currentMonth - i, 1);
        recentMonths.push({ month: d.getMonth(), year: d.getFullYear() });
    }

    // H√†m t·∫°o nh√£n th√°ng
    const labels = recentMonths.map((m) => `Th√°ng ${m.month + 1}`);

    // ===== 1Ô∏è‚É£ Bi·ªÉu ƒë·ªì Doanh thu & L·ª£i nhu·∫≠n (revenueTrend) =====
    const dataRevenue = [];
    const dataProfit = [];

    recentMonths.forEach(({ month, year }) => {
        const monthlyOrders = orders.filter((o) => {
            const d = new Date(o.ngayDat);
            return (
                d.getMonth() === month &&
                d.getFullYear() === year &&
                o.orderStatus === "Ho√†n th√†nh"
            );
        });

        const revenue = monthlyOrders.reduce(
            (sum, o) => sum + (o.tongTienThanhToan || 0),
            0
        );

        const profit = revenue * 0.2; // t·∫°m gi·∫£ ƒë·ªãnh l·ª£i nhu·∫≠n = 20% doanh thu

        dataRevenue.push((revenue / 1_000_000).toFixed(1)); // tri·ªáu ‚Ç´
        dataProfit.push((profit / 1_000_000).toFixed(1));
    });

    // ===== 2Ô∏è‚É£ Bi·ªÉu ƒë·ªì tr√≤n doanh thu theo th∆∞∆°ng hi·ªáu (revenuePie) =====
    const brandMap = {};

    // Ch·ªâ l·∫•y ƒë∆°n ho√†n th√†nh
    orders
        .filter((o) => o.orderStatus === "Ho√†n th√†nh")
        .forEach((o) => {
            o.products.forEach((p) => {
                const brand = p.product?.company?.trim() || "Kh√°c";
                const revenue = p.gia * p.soLuong;
                brandMap[brand] = (brandMap[brand] || 0) + revenue;
            });
        });

    // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo doanh thu
    const sorted = Object.entries(brandMap).sort((a, b) => b[1] - a[1]);

    // L·∫•y 5 th∆∞∆°ng hi·ªáu top
    const top5 = sorted.slice(0, 4);
    const otherTotal = sorted.slice(4).reduce((sum, [, val]) => sum + val, 0);

    const labelsPie = top5.map(([brand]) => brand);
    const dataPie = top5.map(([, val]) => val);

    // Gom nh√≥m "Kh√°c" n·∫øu c√≥
    if (otherTotal > 0) {
        labelsPie.push("Kh√°c");
        dataPie.push(otherTotal);
    }

    // ===== 3Ô∏è‚É£ Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng doanh thu theo th√°ng (revenueGrowth) =====
    // üîπ Gom doanh thu theo t·ª´ng th√°ng
    const revenueByMonth = recentMonths.map((m) => {
        let total = 0;
        orders
            .filter((o) => o.orderStatus === "Ho√†n th√†nh")
            .forEach((o) => {
                const date = new Date(o.ngayDat);
                if (
                    date.getMonth() === m.month &&
                    date.getFullYear() === m.year
                ) {
                    total += o.tongTienThanhToan || 0;
                }
            });
        return total;
    });

    // üîπ T√≠nh ph·∫ßn trƒÉm tƒÉng tr∆∞·ªüng so v·ªõi th√°ng tr∆∞·ªõc
    const dataGrowth = revenueByMonth.map((val, i) => {
        if (i === 0) return 0;
        const prev = revenueByMonth[i - 1];
        if (prev === 0 && val === 0) return 0; // kh√¥ng c√≥ g√¨ thay ƒë·ªïi
        if (prev === 0 && val > 0) return 100; // tƒÉng t·ª´ 0 ‚Üí c√≥ doanh thu
        if (prev > 0 && val === 0) return -100; // t·ª´ c√≥ ‚Üí m·∫•t doanh thu
        return (((val - prev) / prev) * 100).toFixed(1);
    });

    return {
        revenueTrend: { labels, dataRevenue, dataProfit },
        revenuePie: { labels: labelsPie, data: dataPie },
        revenueGrowth: { labels, data: dataGrowth },
    };
}
loadRevenue()
    .then((orders) => {
        const chartData = generateRevenueChartsData(orders);
        renderRevenueCharts(chartData);
    })
    .catch((error) =>
        console.log(`L·ªói trang Doanh Thu, renderRevenueCharts: ${error}`)
    );

async function tableTopRevenue(tableRevenues) {
    const tbody = document.querySelector("#table-revenue");
    tbody.innerHTML = tableRevenues
        .map(
            (revenue) => `
            <tr>
                <td class="ps-5">${revenue.name}</td>
                <td class="text-center">${revenue.quantitySold}</td>
                <td class="text-center">${formatCurrency(revenue.revenue)}</td>
                <td class="text-center ps-3">${revenue.share}%</td>
            </tr>
        `
        )
        .join("");
}
function getTop10ProductsByRevenue(orders) {
    const productMap = {};

    // üîπ Ch·ªâ t√≠nh ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh
    orders
        .filter((o) => o.orderStatus === "Ho√†n th√†nh")
        .forEach((o) => {
            o.products.forEach((p) => {
                const name = p.product?.name || "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh";
                const revenue = p.gia * p.soLuong;
                const quantity = p.soLuong;

                if (!productMap[name]) {
                    productMap[name] = {
                        name,
                        quantitySold: 0,
                        revenue: 0,
                    };
                }

                productMap[name].quantitySold += quantity;
                productMap[name].revenue += revenue;
            });
        });

    // üîπ Chuy·ªÉn sang m·∫£ng v√† s·∫Øp x·∫øp gi·∫£m d·∫ßn theo doanh thu
    const sortedProducts = Object.values(productMap).sort(
        (a, b) => b.revenue - a.revenue
    );

    // üîπ L·∫•y top 10 s·∫£n ph·∫©m
    const top10 = sortedProducts.slice(0, 10);

    // üîπ T√≠nh t·ªïng doanh thu c·ªßa t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm ƒë√≥ng g√≥p
    const totalRevenue = sortedProducts.reduce((sum, p) => sum + p.revenue, 0);

    // üîπ T√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm t·ª´ng s·∫£n ph·∫©m
    top10.forEach((p) => {
        p.share =
            totalRevenue > 0
                ? ((p.revenue / totalRevenue) * 100).toFixed(1)
                : 0;
    });

    return top10;
}
loadRevenue()
    .then((orders) => {
        const top10Products = getTop10ProductsByRevenue(orders);
        tableTopRevenue(top10Products);
    })
    .catch((error) =>
        console.log(`L·ªói trang Doanh Thu, tableTopRevenue: ${error}`)
    );
